<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | Adventures in code]]></title>
  <link href="http://jacknolan.herokuapp.com//blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://jacknolan.herokuapp.com//"/>
  <updated>2012-12-10T17:43:01-05:00</updated>
  <id>http://jacknolan.herokuapp.com//</id>
  <author>
    <name><![CDATA[Jack Nolan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecord without rails]]></title>
    <link href="http://jacknolan.herokuapp.com//blog/2012/11/06/active-record-without-rails/"/>
    <updated>2012-11-06T13:35:00-05:00</updated>
    <id>http://jacknolan.herokuapp.com//blog/2012/11/06/active-record-without-rails</id>
    <content type="html"><![CDATA[<p>TL;DR, Activerecord without rails is a headache, but it’s also a good exercise if you are struggling to find the line between activerecord and rails magic.</p>

<p>As developers we break  down problems into smaller manageable pieces and this approach works well when learning a new framework. When first confronting rails I decided to break up the problem and first learn activerecord first. The project I embarked on was to scrape down some information that would serve as the seed data for a future rails application and I decided to do this in a non rails environment using the gem Activerecord.</p>

<p>The first thing I did was design some barebone structure of the classes. One of the objects I wanted to store for this scrape was a product which would represent something with a name and a price.
<code>ruby
class Product &lt; ActiveRecord::Base
  attr_accessible :name,:price
end
</code>
Next I need to set up the database for ActiveRecord to use. To do this I would need a migration. So to examine a basic migration I started by making a new rails project and generating an empty migration.
<code>bash
ralis new rails_playground
cd rails_playground
rails g migration empty
</code>
<code>ruby
class Empty &lt; ActiveRecord::Migration
  def change
  end
end
</code>
This is just a ruby object that inherits from <code>ActiveRecord::Migration</code> so in my project I created a new file and set up my first migration.
```ruby
class CreateProductTable &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :products do |i|
  i.string :name
  i.decimal :price
end
</code></pre>

<p>  end
end
<code>
This simple migration just creates a new table products. The next step was to find out how to run a migration without the handy rake task. This turned out to be the hardest part of the project since information on ActiveRecord that is not tied to rails is scarce and in the end I decided to drop into irb...
</code>ruby
require “active_record”
class CreateProductTable &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :products do |i|
  i.string :name
  i.decimal :price
end
</code></pre>

<p>  end
end
migration = CreateProductTable.new
migration.methods.sort
<code>
Here we have a large list of method this migration object defines. Looking at this list the &lt;code&gt;migrate&lt;/code&gt; method jumps out at me for a potential way to run a migration
so next I tried this method.
</code>
CreateProductTable.new.migrate
ArgumentError: wrong number of arguments (0 for 1)
  from /Users/jacknolan/.rvm/gems/ruby-1.9.3-p286/gems/activerecord-3.2.8/lib/active_record/migration.rb:380:in <code>migrate'
  from (irb):11
  from /Users/jacknolan/.rvm/rubies/ruby-1.9.3-p286/bin/irb:16:in</code><main>'</p>

<p><code>
Lets try this with an argument, how about the method it should use?
</code>ruby
CreateProductTable.new.migrate :change
ActiveRecord::ConnectionNotEstablished: ActiveRecord::ConnectionNotEstablished
  from /Users/jacknolan/.rvm/gems/ruby-1.9.3-p286/gems/activerecord-3.2.8/lib/active_record/connection_adapters/abstract/connection_specification.rb:166:in <code>connection_pool'
  from /Users/jacknolan/.rvm/gems/ruby-1.9.3-p286/gems/activerecord-3.2.8/lib/active_record/migration.rb:389:in</code>migrate'
  from (irb):12
  from /Users/jacknolan/.rvm/rubies/ruby-1.9.3-p286/bin/irb:16:in `<main>'
```
Thats promising lets look into how to make a connection to a database! After looking around google for awhile I found this code:</p>

<p><code>ruby
ActiveRecord::Base.establish_connection(
  :adapter =&gt; "sqlite3",
  :database =&gt; “development.sqlite3"
  )
</code>
Just adding this at the top of the migration file, not the best solution but this is just exploring. Then running that file...
<code>bash
ruby 001_create_Product_table.rb
-- create_table(:products)
   -&gt; 0.0196s
</code>
Finally playing around with the Product class either in irb or just in the file...
<code>ruby
 Product.create(:name=&gt;"steel",:price=&gt;7.3)
=&gt; #&lt;Product id: 1, name: "steal", price: 7.3&gt;
 Product.all
=&gt; #[&lt;Product id: 1, name: "steal", price: 7.3&gt;]
</code>
Thats it with the class made saving the information to the database was as simple as: <code>Product.create(:name=>name, :price=>7.6)</code></p>

<p>Doing this project helped me to understand the line between active record and rails. Also was really beneficial in learning MVC architecture since I just created a rails model independent of any magic!</p>
]]></content>
  </entry>
  
</feed>
