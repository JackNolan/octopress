<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Adventures in code]]></title>
  <link href="http://jacknolan.herokuapp.com//atom.xml" rel="self"/>
  <link href="http://jacknolan.herokuapp.com//"/>
  <updated>2012-11-07T10:24:05-05:00</updated>
  <id>http://jacknolan.herokuapp.com//</id>
  <author>
    <name><![CDATA[Jack Nolan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecord without rails]]></title>
    <link href="http://jacknolan.herokuapp.com//blog/2012/11/06/active-record-without-rails/"/>
    <updated>2012-11-06T13:35:00-05:00</updated>
    <id>http://jacknolan.herokuapp.com//blog/2012/11/06/active-record-without-rails</id>
    <content type="html"><![CDATA[<p>TL;DR, Activerecord without rails is a headache, but it’s also a good exercise if you are struggling to find the line between activerecord and rails magic.</p>

<p>As developers we break  down problems into smaller manageable pieces and this approach works well when learning a new framework. When first confronting rails I decided to break up the problem and first learn activerecord first. The project I embarked on was to scrape down some information that would serve as the seed data for a future rails application and I decided to do this in a non rails environment using the gem Activerecord.</p>

<p>The first thing I did was design some barebone structure of the classes. One of the objects I wanted to store for this scrape was a product which would represent something with a name and a price.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span><span class="ss">:price</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next I need to set up the database for ActiveRecord to use. To do this I would need a migration. So to examine a basic migration I started by making a new rails project and generating an empty migration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ralis new rails_playground
</span><span class='line'><span class="nb">cd </span>rails_playground
</span><span class='line'>rails g migration empty
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Empty</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a ruby object that inherits from <code>ActiveRecord::Migration</code> so in my project I created a new file and set up my first migration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateProductTable</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:products</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">i</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>      <span class="n">i</span><span class="o">.</span><span class="n">decimal</span> <span class="ss">:price</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This simple migration just creates a new table products. The next step was to find out how to run a migration without the handy rake task. This turned out to be the hardest part of the project since information on ActiveRecord that is not tied to rails is scarce and in the end I decided to drop into irb&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="err">“</span><span class="n">active_record</span><span class="err">”</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateProductTable</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:products</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>      <span class="n">i</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>      <span class="n">i</span><span class="o">.</span><span class="n">decimal</span> <span class="ss">:price</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">migration</span> <span class="o">=</span> <span class="no">CreateProductTable</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">migration</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">sort</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we have a large list of method this migration object defines. Looking at this list the <code>migrate</code> method jumps out at me for a potential way to run a migration
so next I tried this method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CreateProductTable</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">migrate</span>
</span><span class='line'><span class="no">ArgumentError</span><span class="p">:</span> <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">0</span> <span class="k">for</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">from</span> <span class="sr">/Users/</span><span class="n">jacknolan</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p286</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">activerecord</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">8</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">active_record</span><span class="o">/</span><span class="n">migration</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">380</span><span class="ss">:in</span> <span class="sb">`migrate&#39;</span>
</span><span class='line'><span class="sb">  from (irb):11</span>
</span><span class='line'><span class="sb">  from /Users/jacknolan/.rvm/rubies/ruby-1.9.3-p286/bin/irb:16:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets try this with an argument, how about the method it should use?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CreateProductTable</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">migrate</span> <span class="ss">:change</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">ConnectionNotEstablished</span><span class="p">:</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">ConnectionNotEstablished</span>
</span><span class='line'>  <span class="n">from</span> <span class="sr">/Users/</span><span class="n">jacknolan</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p286</span><span class="o">/</span><span class="n">gems</span><span class="o">/</span><span class="n">activerecord</span><span class="o">-</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">8</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">active_record</span><span class="o">/</span><span class="n">connection_adapters</span><span class="o">/</span><span class="n">abstract</span><span class="o">/</span><span class="n">connection_specification</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">166</span><span class="ss">:in</span> <span class="sb">`connection_pool&#39;</span>
</span><span class='line'><span class="sb">  from /Users/jacknolan/.rvm/gems/ruby-1.9.3-p286/gems/activerecord-3.2.8/lib/active_record/migration.rb:389:in `</span><span class="n">migrate</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  from (irb):12</span>
</span><span class='line'><span class="s1">  from /Users/jacknolan/.rvm/rubies/ruby-1.9.3-p286/bin/irb:16:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats promising lets look into how to make a connection to a database! After looking around google for awhile I found this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:adapter</span> <span class="o">=&gt;</span> <span class="s2">&quot;sqlite3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="err">“</span><span class="n">development</span><span class="o">.</span><span class="n">sqlite3</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">  )</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just adding this at the top of the migration file, not the best solution but this is just exploring. Then running that file&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ruby 001_create_Product_table.rb
</span><span class='line'>-- create_table<span class="o">(</span>:products<span class="o">)</span>
</span><span class='line'>   -&gt; 0.0196s
</span></code></pre></td></tr></table></div></figure>


<p>Finally playing around with the Product class either in irb or just in the file&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">Product</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;steel&quot;</span><span class="p">,</span><span class="ss">:price</span><span class="o">=&gt;</span><span class="mi">7</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Product id: 1, name: &quot;steal&quot;, price: 7.3&gt; </span>
</span><span class='line'> <span class="no">Product</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#[&lt;Product id: 1, name: &quot;d&quot;, price: 7.3&gt;] </span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats it with the class made saving the information to the database was as simple as: <code>Product.create(:name=>name, :price=>7.6)</code></p>

<p>Doing this project helped me to understand the line between active record and rails. Also was really beneficial in learning MVC architecture since I just created a rails model independent of any magic!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classroom Vs. bedroom Vs. Lecture Hall]]></title>
    <link href="http://jacknolan.herokuapp.com//blog/2012/10/17/new-post/"/>
    <updated>2012-10-17T12:33:00-04:00</updated>
    <id>http://jacknolan.herokuapp.com//blog/2012/10/17/new-post</id>
    <content type="html"><![CDATA[<p>At one time or another I have experienced all major ways of learning computer science: self study, university classes, and the group-oriented classroom. This gives me an unique ability to examine the pros and cons of each style.</p>

<h2>Lecture Hall aka University</h2>

<p><img src="http://farm5.staticflickr.com/4031/4530228887_78634666ff_z.jpg" title="Lecture hall" alt="Lecture hall" /></p>

<p>No one is a stranger to the classic college formula these days: lecture on monday, test on friday. While University teaching works to educate a large number of students in a (relatively) short time, it does have a few drawbacks.</p>

<h3>Cons:</h3>

<ol>
<li>Large class sizes

<ul>
<li>hard to reach professors</li>
<li>little to no sense of ‘comradery’</li>
<li>slows down the class</li>
<li>hard for professors to give meaningful feedback</li>
</ul>
</li>
<li>Emphasis on tests

<ul>
<li>completely academic

<ul>
<li>no real world analogies</li>
</ul>
</li>
<li>leads to a ‘get an A’ mentality rather than a ‘learn this shit’ mentality</li>
</ul>
</li>
<li>Bureaucracy

<ul>
<li>hard for professors to change class content</li>
<li>professors tend to burn out from dealing with bureaucracy</li>
<li>leads to stagnation</li>
<li>forms, hoops, and permissions for every decision</li>
</ul>
</li>
<li>Cost

<ul>
<li>average cost of four year degree: $21,657</li>
<li>this number increases every year</li>
<li>takes four years of your life</li>
</ul>
</li>
<li>Focused on theory

<ul>
<li>great foundations</li>
<li>does not really prepare you to develop</li>
</ul>
</li>
</ol>


<h3>Pros:</h3>

<ol>
<li>Degree

<ul>
<li>an accredited university provides formal proof of completion</li>
<li>required by some organisations</li>
<li>most provide an excellent foundation in theory</li>
</ul>
</li>
<li>College experience

<ul>
<li>a large community leads to networking opportunites</li>
<li>achieve a working knowledge in a variety of subjects</li>
</ul>
</li>
</ol>


<h3>To conclude:</h3>

<p>Overall I dislike the current way computer science is taught in universities.  In the current environment it is almost impossible for professors to teach full time and keep up with the changing field of computer science. This forces a greater emphasis on theory which leads to graduates that can explain the O(n) of an algorithm they outlined, but have no idea how to launch a web server or an application.</p>

<p>Next up teaching yourself&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby under the hood]]></title>
    <link href="http://jacknolan.herokuapp.com//blog/2012/10/14/ruby-under-the-hood/"/>
    <updated>2012-10-14T17:29:00-04:00</updated>
    <id>http://jacknolan.herokuapp.com//blog/2012/10/14/ruby-under-the-hood</id>
    <content type="html"><![CDATA[<p>After completing the computer architecture course at the University of Minnesota I find myself wondering about how things work at a low level. Now at the flatiron school we are covering ruby, and I find myself wondering how the memory allocation works for ruby objects. After a bit of searching I found this <a href="http://www.scribd.com/doc/27174770/Garbage-Collection-and-the-Ruby-Heap">slide deck</a>that contained a very clear explanation of the behind the scenes workings of ruby; While paying special attention to memory allocation and garbage collection.</p>

<p>These slides reminded me of my final project in the architecture class where I implemented a rudimentary malloc of my own which, it turns out, works much like the allocation of memory for classes works in ruby. I wonder how hard it would be to implement this method of garbage collection on top of it&#8230; hopefully nothing good on tv next weekend!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Job indexing]]></title>
    <link href="http://jacknolan.herokuapp.com//blog/2012/10/03/day-one/"/>
    <updated>2012-10-03T15:39:00-04:00</updated>
    <id>http://jacknolan.herokuapp.com//blog/2012/10/03/day-one</id>
    <content type="html"><![CDATA[<p>Before I started at flatiron school this semester I worked for <a href="http://www.linkup.com/">JobDig</a> writing parsers and spiders to index jobs. It was good work and a great first experience in the tech industry. However, there were a few common things I ran into on a day to day bases that I thought I would share to show potential employers some good practices when listing jobs.</p>

<p>1) Use concise html and css. Since some poor soul out there (me) may have to wade through your html and css consider consolidating your html and css both to organize your site better but to help them index your jobs. Using constant naming schemes can save them time and get your openings out to the community.</p>

<p>2) Don&#8217;t hide you employment page. Seriously, I have had to hack at the url in order to get to an employment page due to broken links or hidden job listings. By keeping it visible you make it easier for potential hires to apply for the job!</p>

<p>3) Keep it simple. Same as number two, if you over complicate your application process the great candidates and job listings sites are going to skip your site which means less candidates. If you lack the time consider using an third party ( like <a href="">Taleo</a>!) to list your jobs in a proven organised way.</p>

<p>It is in a company&#8217;s interest to have as many people as possible see their job listings. More views means more applications, which means more choice in candidates which leads to better hires! By keeping these tips in mind when designing your sites employment section you can help your potential hires find you quickly and efficiently.</p>
]]></content>
  </entry>
  
</feed>
